// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FluentUI
@_exported import FluentUI
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(MSFColorProviding) public protocol ColorProviding {
  @objc func primaryColor(for window: UIKit.UIWindow) -> UIKit.UIColor?
  @objc func primaryTint10Color(for window: UIKit.UIWindow) -> UIKit.UIColor?
  @objc func primaryTint20Color(for window: UIKit.UIWindow) -> UIKit.UIColor?
  @objc func primaryTint30Color(for window: UIKit.UIWindow) -> UIKit.UIColor?
  @objc func primaryTint40Color(for window: UIKit.UIWindow) -> UIKit.UIColor?
  @objc func primaryShade10Color(for window: UIKit.UIWindow) -> UIKit.UIColor?
  @objc func primaryShade20Color(for window: UIKit.UIWindow) -> UIKit.UIColor?
  @objc func primaryShade30Color(for window: UIKit.UIWindow) -> UIKit.UIColor?
}
@objc open class ColorProvidingStyle : FluentUI.FluentUIStyle {
  public init(colorProviding: any FluentUI.ColorProviding, window: UIKit.UIWindow)
  override open var Colors: FluentUI.FluentUIStyle.ColorsAppearanceProxy {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MSFColors) final public class Colors : ObjectiveC.NSObject {
  @objc(MSFColorPalette) public enum Palette : Swift.Int {
    case anchorShade30
    case anchorTint40
    case beigeShade30
    case beigeTint40
    case blueShade30
    case blueTint40
    case brassShade30
    case brassTint40
    case brownShade30
    case brownTint40
    case cornFlowerShade30
    case cornFlowerTint40
    case cranberryShade30
    case cranberryTint40
    case darkGreenShade30
    case darkGreenTint40
    case darkRedShade30
    case darkRedTint40
    case forestShade30
    case forestTint40
    case goldShade30
    case goldTint40
    case grapeShade30
    case grapeTint40
    case lavenderShade30
    case lavenderTint40
    case lightTealShade30
    case lightTealTint40
    case lilacShade30
    case lilacTint40
    case magentaShade30
    case magentaTint40
    case marigoldShade30
    case marigoldTint40
    case minkShade30
    case minkTint40
    case navyShade30
    case navyTint40
    case peachShade30
    case peachTint40
    case pinkShade30
    case pinkTint40
    case platinumShade30
    case platinumTint40
    case plumShade30
    case plumTint40
    case pumpkinShade30
    case pumpkinTint40
    case purpleShade30
    case purpleTint40
    case redShade30
    case redTint40
    case royalBlueShade30
    case royalBlueTint40
    case seafoamShade30
    case seafoamTint40
    case steelShade30
    case steelTint40
    case tealShade30
    case tealTint40
    case pinkRed10
    case red20
    case red10
    case orange30
    case orange20
    case orangeYellow20
    case green20
    case green10
    case cyan30
    case cyan20
    case cyanBlue20
    case cyanBlue10
    case blue10
    case blueMagenta30
    case blueMagenta20
    case magenta20
    case magenta10
    case magentaPink10
    case gray40
    case gray30
    case gray20
    case gray25
    case gray50
    case gray100
    case gray200
    case gray300
    case gray400
    case gray500
    case gray600
    case gray700
    case gray800
    case gray900
    case gray950
    case communicationBlue
    case communicationBlueTint40
    case communicationBlueTint30
    case communicationBlueTint20
    case communicationBlueTint10
    case communicationBlueShade30
    case communicationBlueShade20
    case communicationBlueShade10
    case dangerPrimary
    case dangerTint40
    case dangerTint30
    case dangerTint20
    case dangerTint10
    case dangerShade30
    case dangerShade20
    case dangerShade10
    case warningPrimary
    case warningTint40
    case warningTint30
    case warningTint20
    case warningTint10
    case warningShade30
    case warningShade20
    case warningShade10
    case successPrimary
    case successTint40
    case successTint30
    case successTint20
    case successTint10
    case successShade30
    case successShade20
    case successShade10
    case presenceAvailable
    case presenceAway
    case presenceBlocked
    case presenceBusy
    case presenceDnd
    case presenceOffline
    case presenceOof
    case presenceUnknown
    public var color: UIKit.UIColor {
      get
    }
    public var name: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static func setProvider(provider: any FluentUI.ColorProviding, for window: UIKit.UIWindow)
  @objc public static func primary(for window: UIKit.UIWindow) -> UIKit.UIColor
  @objc public static func primaryTint10(for window: UIKit.UIWindow) -> UIKit.UIColor
  @objc public static func primaryTint20(for window: UIKit.UIWindow) -> UIKit.UIColor
  @objc public static func primaryTint30(for window: UIKit.UIWindow) -> UIKit.UIColor
  @objc public static func primaryTint40(for window: UIKit.UIWindow) -> UIKit.UIColor
  @objc public static func primaryShade10(for window: UIKit.UIWindow) -> UIKit.UIColor
  @objc public static func primaryShade20(for window: UIKit.UIWindow) -> UIKit.UIColor
  @objc public static func primaryShade30(for window: UIKit.UIWindow) -> UIKit.UIColor
  @available(*, deprecated, renamed: "setProvider(_:forWindow:)")
  @objc public static var primary: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "setProvider(_:forWindow:)")
  @objc public static var primaryTint10: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "setProvider(_:forWindow:)")
  @objc public static var primaryTint20: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "setProvider(_:forWindow:)")
  @objc public static var primaryTint30: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "setProvider(_:forWindow:)")
  @objc public static var primaryTint40: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "setProvider(_:forWindow:)")
  @objc public static var primaryShade10: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "setProvider(_:forWindow:)")
  @objc public static var primaryShade20: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "setProvider(_:forWindow:)")
  @objc public static var primaryShade30: UIKit.UIColor {
    @objc get
    @objc set
  }
  @available(*, deprecated, renamed: "textOnAccent")
  @objc public static var foregroundOnPrimary: UIKit.UIColor
  @objc public static let gray950: UIKit.UIColor
  @objc public static let gray900: UIKit.UIColor
  @objc public static let gray800: UIKit.UIColor
  @objc public static let gray700: UIKit.UIColor
  @objc public static let gray600: UIKit.UIColor
  @objc public static let gray500: UIKit.UIColor
  @objc public static let gray400: UIKit.UIColor
  @objc public static let gray300: UIKit.UIColor
  @objc public static let gray200: UIKit.UIColor
  @objc public static let gray100: UIKit.UIColor
  @objc public static let gray50: UIKit.UIColor
  @objc public static let gray25: UIKit.UIColor
  @objc public static let error: UIKit.UIColor
  @objc public static let warning: UIKit.UIColor
  @objc public static let communicationBlue: UIKit.UIColor
  @available(*, deprecated, renamed: "textDisabled")
  @objc public static let disabled: UIKit.UIColor
  @objc public static let textDominant: UIKit.UIColor
  @objc public static var textPrimary: UIKit.UIColor
  @objc public static let textSecondary: UIKit.UIColor
  @objc public static let textDisabled: UIKit.UIColor
  @objc public static let textOnAccent: UIKit.UIColor
  @objc public static let iconPrimary: UIKit.UIColor
  @objc public static let iconSecondary: UIKit.UIColor
  @objc public static let iconDisabled: UIKit.UIColor
  @objc public static let iconOnAccent: UIKit.UIColor
  @objc public static var surfacePrimary: UIKit.UIColor
  @objc public static let surfaceSecondary: UIKit.UIColor
  @objc public static let surfaceTertiary: UIKit.UIColor
  @objc public static let surfaceQuaternary: UIKit.UIColor
  @objc public static let dividerOnPrimary: UIKit.UIColor
  @objc public static let dividerOnSecondary: UIKit.UIColor
  @objc public static let dividerOnTertiary: UIKit.UIColor
  @objc(colorFromPalette:) public static func color(from palette: FluentUI.Colors.Palette) -> UIKit.UIColor
  @objc deinit
}
extension FluentUI.Colors.Palette : Swift.CaseIterable {
  public typealias AllCases = [FluentUI.Colors.Palette]
  public static var allCases: [FluentUI.Colors.Palette] {
    get
  }
}
extension FluentUI.Colors {
  public struct Progress {
    public static var trackTint: UIKit.UIColor
  }
  public struct NavigationBar {
    public static var background: UIKit.UIColor
    public static var tint: UIKit.UIColor
    public static var title: UIKit.UIColor
  }
  public struct Toolbar {
    public static var background: UIKit.UIColor
    public static var tint: UIKit.UIColor
  }
  @objc public static var navigationBarBackground: UIKit.UIColor {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers public class FluentUIFramework : ObjectiveC.NSObject {
  @objc public static let resourceBundle: Foundation.Bundle
  @objc public static let colorsBundle: Foundation.Bundle
  @available(*, deprecated, message: "Non-fluent icons no longer supported. Setting this var no longer has any effect and it will be removed in a future update.")
  @objc public static var usesFluentIcons: Swift.Bool
  @available(*, deprecated, renamed: "initializeAppearance(with:whenContainedInInstancesOf:)")
  @objc public static func initializeAppearance()
  @objc public static func initializeAppearance(with primaryColor: UIKit.UIColor, whenContainedInInstancesOf containerTypes: [any UIKit.UIAppearanceContainer.Type]? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Application {
  @objc dynamic public class func preferredContentSizeCategory() -> UIKit.UIContentSizeCategory
  @objc deinit
}
public protocol AppearaceProxyComponent : AnyObject {
  associatedtype AppearanceProxyType
  var appearanceProxy: Self.AppearanceProxyType { get }
  var themeAware: Swift.Bool { get set }
  func didChangeAppearanceProxy()
}
extension FluentUI.AppearaceProxyComponent {
  public func initAppearanceProxy(themeAware: Swift.Bool = true)
}
extension Foundation.NSNotification.Name {
  public static let didChangeTheme: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers public class FluentUIThemeManager {
  public class func stylesheet(for window: UIKit.UIWindow?) -> FluentUI.FluentUIStyle?
  public class func removeStylesheet(for window: UIKit.UIWindow)
  public class func setStylesheet(stylesheet: FluentUI.FluentUIStyle, for window: UIKit.UIWindow)
  @objc dynamic public class func stylesheet(_ stylesheet: FluentUI.FluentUIStyle) -> FluentUI.FluentUIStyle
  public static let `default`: FluentUI.FluentUIThemeManager
  public static var S: FluentUI.FluentUIStyle {
    get
  }
  @objc deinit
}
public struct S {
  public enum FontTextStyle {
    case body
    case callout
    case caption1
    case caption2
    case footnote
    case headline
    case largeTitle
    case subheadline
    case title1
    case title2
    case title3
    public static func == (a: FluentUI.S.FontTextStyle, b: FluentUI.S.FontTextStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers open class FluentUIStyle : ObjectiveC.NSObject {
  public class func shared() -> FluentUI.FluentUIStyle
  open var Border: FluentUI.FluentUIStyle.BorderAppearanceProxy {
    get
  }
  open class BorderAppearanceProxy {
    final public let mainProxy: () -> FluentUI.FluentUIStyle
    public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
    open var radius: FluentUI.FluentUIStyle.BorderAppearanceProxy.radiusAppearanceProxy {
      get
    }
    open class radiusAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var large: CoreFoundation.CGFloat {
        get
      }
      open var medium: CoreFoundation.CGFloat {
        get
      }
      open var none: CoreFoundation.CGFloat {
        get
      }
      open var small: CoreFoundation.CGFloat {
        get
      }
      open var xLarge: CoreFoundation.CGFloat {
        get
      }
      open var xxLarge: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    open var size: FluentUI.FluentUIStyle.BorderAppearanceProxy.sizeAppearanceProxy {
      get
    }
    open class sizeAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var none: CoreFoundation.CGFloat {
        get
      }
      open var thick: CoreFoundation.CGFloat {
        get
      }
      open var thicker: CoreFoundation.CGFloat {
        get
      }
      open var thickest: CoreFoundation.CGFloat {
        get
      }
      open var thin: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    @objc deinit
  }
  open var Colors: FluentUI.FluentUIStyle.ColorsAppearanceProxy {
    get
  }
  open class ColorsAppearanceProxy {
    final public let mainProxy: () -> FluentUI.FluentUIStyle
    public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
    open var Background: FluentUI.FluentUIStyle.ColorsAppearanceProxy.BackgroundAppearanceProxy {
      get
    }
    open class BackgroundAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var brandDisabled: UIKit.UIColor {
        get
      }
      open var brandHover: UIKit.UIColor {
        get
      }
      open var brandPressed: UIKit.UIColor {
        get
      }
      open var brandRest: UIKit.UIColor {
        get
      }
      open var brandSelected: UIKit.UIColor {
        get
      }
      open var neutral1: UIKit.UIColor {
        get
      }
      open var neutral2: UIKit.UIColor {
        get
      }
      open var neutral3: UIKit.UIColor {
        get
      }
      open var neutral4: UIKit.UIColor {
        get
      }
      open var neutral5: UIKit.UIColor {
        get
      }
      open var neutralDisabled: UIKit.UIColor {
        get
      }
      open var surfacePrimary: UIKit.UIColor {
        get
      }
      open var surfaceQuaternary: UIKit.UIColor {
        get
      }
      @objc deinit
    }
    open var Brand: FluentUI.FluentUIStyle.ColorsAppearanceProxy.BrandAppearanceProxy {
      get
    }
    open class BrandAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var primary: UIKit.UIColor {
        get
      }
      open var shade10: UIKit.UIColor {
        get
      }
      open var shade20: UIKit.UIColor {
        get
      }
      open var shade30: UIKit.UIColor {
        get
      }
      open var tint10: UIKit.UIColor {
        get
      }
      open var tint20: UIKit.UIColor {
        get
      }
      open var tint30: UIKit.UIColor {
        get
      }
      open var tint40: UIKit.UIColor {
        get
      }
      @objc deinit
    }
    open var Elevation: FluentUI.FluentUIStyle.ColorsAppearanceProxy.ElevationAppearanceProxy {
      get
    }
    open class ElevationAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var highElevation: UIKit.UIColor {
        get
      }
      open var highElevation1: UIKit.UIColor {
        get
      }
      open var highElevation2: UIKit.UIColor {
        get
      }
      open var lowElevation1: UIKit.UIColor {
        get
      }
      open var lowElevation2: UIKit.UIColor {
        get
      }
      @objc deinit
    }
    open var Foreground: FluentUI.FluentUIStyle.ColorsAppearanceProxy.ForegroundAppearanceProxy {
      get
    }
    open class ForegroundAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var brandDisabled: UIKit.UIColor {
        get
      }
      open var brandHover: UIKit.UIColor {
        get
      }
      open var brandPressed: UIKit.UIColor {
        get
      }
      open var brandRest: UIKit.UIColor {
        get
      }
      open var brandSelected: UIKit.UIColor {
        get
      }
      open var neutral1: UIKit.UIColor {
        get
      }
      open var neutral2: UIKit.UIColor {
        get
      }
      open var neutral3: UIKit.UIColor {
        get
      }
      open var neutral4: UIKit.UIColor {
        get
      }
      open var neutralDisabled: UIKit.UIColor {
        get
      }
      open var neutralInverted: UIKit.UIColor {
        get
      }
      @objc deinit
    }
    open var Presence: FluentUI.FluentUIStyle.ColorsAppearanceProxy.PresenceAppearanceProxy {
      get
    }
    open class PresenceAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var available: UIKit.UIColor {
        get
      }
      open var away: UIKit.UIColor {
        get
      }
      open var blocked: UIKit.UIColor {
        get
      }
      open var busy: UIKit.UIColor {
        get
      }
      open var doNotDisturb: UIKit.UIColor {
        get
      }
      open var offline: UIKit.UIColor {
        get
      }
      open var outOfOffice: UIKit.UIColor {
        get
      }
      open var unknown: UIKit.UIColor {
        get
      }
      @objc deinit
    }
    open var Shadow: FluentUI.FluentUIStyle.ColorsAppearanceProxy.ShadowAppearanceProxy {
      get
    }
    open class ShadowAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var clear: UIKit.UIColor {
        get
      }
      open var opacity12: UIKit.UIColor {
        get
      }
      open var opacity14: UIKit.UIColor {
        get
      }
      open var opacity20: UIKit.UIColor {
        get
      }
      open var opacity24: UIKit.UIColor {
        get
      }
      open var opacity28: UIKit.UIColor {
        get
      }
      open var opacity40: UIKit.UIColor {
        get
      }
      open var opacity48: UIKit.UIColor {
        get
      }
      open var opacity60: UIKit.UIColor {
        get
      }
      open var opaque: UIKit.UIColor {
        get
      }
      @objc deinit
    }
    open var Stroke: FluentUI.FluentUIStyle.ColorsAppearanceProxy.StrokeAppearanceProxy {
      get
    }
    open class StrokeAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var brandDisabled: UIKit.UIColor {
        get
      }
      open var brandHover: UIKit.UIColor {
        get
      }
      open var brandPressed: UIKit.UIColor {
        get
      }
      open var brandRest: UIKit.UIColor {
        get
      }
      open var brandSelected: UIKit.UIColor {
        get
      }
      open var neutral1: UIKit.UIColor {
        get
      }
      open var neutral2: UIKit.UIColor {
        get
      }
      open var neutral3: UIKit.UIColor {
        get
      }
      open var neutralAccessible: UIKit.UIColor {
        get
      }
      open var neutralDisabled: UIKit.UIColor {
        get
      }
      @objc deinit
    }
    @objc deinit
  }
  open var Icon: FluentUI.FluentUIStyle.IconAppearanceProxy {
    get
  }
  open class IconAppearanceProxy {
    final public let mainProxy: () -> FluentUI.FluentUIStyle
    public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
    open var accentColor: UIKit.UIColor {
      get
    }
    open var size: FluentUI.FluentUIStyle.IconAppearanceProxy.sizeAppearanceProxy {
      get
    }
    open class sizeAppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var large: CoreFoundation.CGFloat {
        get
      }
      open var medium: CoreFoundation.CGFloat {
        get
      }
      open var small: CoreFoundation.CGFloat {
        get
      }
      open var xLarge: CoreFoundation.CGFloat {
        get
      }
      open var xSmall: CoreFoundation.CGFloat {
        get
      }
      open var xxLarge: CoreFoundation.CGFloat {
        get
      }
      open var xxSmall: CoreFoundation.CGFloat {
        get
      }
      open var xxxLarge: CoreFoundation.CGFloat {
        get
      }
      open var xxxSmall: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    @objc deinit
  }
  open var Opacity: FluentUI.FluentUIStyle.OpacityAppearanceProxy {
    get
  }
  open class OpacityAppearanceProxy {
    final public let mainProxy: () -> FluentUI.FluentUIStyle
    public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
    open var clear: CoreFoundation.CGFloat {
      get
    }
    open var none: CoreFoundation.CGFloat {
      get
    }
    open var opacity05: CoreFoundation.CGFloat {
      get
    }
    open var opacity16: CoreFoundation.CGFloat {
      get
    }
    open var opacity24: CoreFoundation.CGFloat {
      get
    }
    open var opacity32: CoreFoundation.CGFloat {
      get
    }
    open var opacity64: CoreFoundation.CGFloat {
      get
    }
    open var opacity72: CoreFoundation.CGFloat {
      get
    }
    open var opacity8: CoreFoundation.CGFloat {
      get
    }
    open var opacity88: CoreFoundation.CGFloat {
      get
    }
    open var opacity96: CoreFoundation.CGFloat {
      get
    }
    @objc deinit
  }
  open var Shadow: FluentUI.FluentUIStyle.ShadowAppearanceProxy {
    get
  }
  open class ShadowAppearanceProxy {
    final public let mainProxy: () -> FluentUI.FluentUIStyle
    public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
    open var shadow16: FluentUI.FluentUIStyle.ShadowAppearanceProxy.shadow16AppearanceProxy {
      get
    }
    open class shadow16AppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var blur1: CoreFoundation.CGFloat {
        get
      }
      open var blur2: CoreFoundation.CGFloat {
        get
      }
      open var color1: UIKit.UIColor {
        get
      }
      open var color2: UIKit.UIColor {
        get
      }
      open var x1: CoreFoundation.CGFloat {
        get
      }
      open var x2: CoreFoundation.CGFloat {
        get
      }
      open var y1: CoreFoundation.CGFloat {
        get
      }
      open var y2: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    open var shadow2: FluentUI.FluentUIStyle.ShadowAppearanceProxy.shadow2AppearanceProxy {
      get
    }
    open class shadow2AppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var blur1: CoreFoundation.CGFloat {
        get
      }
      open var blur2: CoreFoundation.CGFloat {
        get
      }
      open var color1: UIKit.UIColor {
        get
      }
      open var color2: UIKit.UIColor {
        get
      }
      open var x1: CoreFoundation.CGFloat {
        get
      }
      open var x2: CoreFoundation.CGFloat {
        get
      }
      open var y1: CoreFoundation.CGFloat {
        get
      }
      open var y2: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    open var shadow28: FluentUI.FluentUIStyle.ShadowAppearanceProxy.shadow28AppearanceProxy {
      get
    }
    open class shadow28AppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var blur1: CoreFoundation.CGFloat {
        get
      }
      open var blur2: CoreFoundation.CGFloat {
        get
      }
      open var color1: UIKit.UIColor {
        get
      }
      open var color2: UIKit.UIColor {
        get
      }
      open var x1: CoreFoundation.CGFloat {
        get
      }
      open var x2: CoreFoundation.CGFloat {
        get
      }
      open var y1: CoreFoundation.CGFloat {
        get
      }
      open var y2: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    open var shadow4: FluentUI.FluentUIStyle.ShadowAppearanceProxy.shadow4AppearanceProxy {
      get
    }
    open class shadow4AppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var blur1: CoreFoundation.CGFloat {
        get
      }
      open var blur2: CoreFoundation.CGFloat {
        get
      }
      open var color1: UIKit.UIColor {
        get
      }
      open var color2: UIKit.UIColor {
        get
      }
      open var x1: CoreFoundation.CGFloat {
        get
      }
      open var x2: CoreFoundation.CGFloat {
        get
      }
      open var y1: CoreFoundation.CGFloat {
        get
      }
      open var y2: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    open var shadow64: FluentUI.FluentUIStyle.ShadowAppearanceProxy.shadow64AppearanceProxy {
      get
    }
    open class shadow64AppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var blur1: CoreFoundation.CGFloat {
        get
      }
      open var blur2: CoreFoundation.CGFloat {
        get
      }
      open var color1: UIKit.UIColor {
        get
      }
      open var color2: UIKit.UIColor {
        get
      }
      open var x1: CoreFoundation.CGFloat {
        get
      }
      open var x2: CoreFoundation.CGFloat {
        get
      }
      open var y1: CoreFoundation.CGFloat {
        get
      }
      open var y2: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    open var shadow8: FluentUI.FluentUIStyle.ShadowAppearanceProxy.shadow8AppearanceProxy {
      get
    }
    open class shadow8AppearanceProxy {
      final public let mainProxy: () -> FluentUI.FluentUIStyle
      public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
      open var blur1: CoreFoundation.CGFloat {
        get
      }
      open var blur2: CoreFoundation.CGFloat {
        get
      }
      open var color1: UIKit.UIColor {
        get
      }
      open var color2: UIKit.UIColor {
        get
      }
      open var x1: CoreFoundation.CGFloat {
        get
      }
      open var x2: CoreFoundation.CGFloat {
        get
      }
      open var y1: CoreFoundation.CGFloat {
        get
      }
      open var y2: CoreFoundation.CGFloat {
        get
      }
      @objc deinit
    }
    @objc deinit
  }
  open var Spacing: FluentUI.FluentUIStyle.SpacingAppearanceProxy {
    get
  }
  open class SpacingAppearanceProxy {
    final public let mainProxy: () -> FluentUI.FluentUIStyle
    public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
    open var large: CoreFoundation.CGFloat {
      get
    }
    open var medium: CoreFoundation.CGFloat {
      get
    }
    open var none: CoreFoundation.CGFloat {
      get
    }
    open var small: CoreFoundation.CGFloat {
      get
    }
    open var xLarge: CoreFoundation.CGFloat {
      get
    }
    open var xSmall: CoreFoundation.CGFloat {
      get
    }
    open var xxLarge: CoreFoundation.CGFloat {
      get
    }
    open var xxSmall: CoreFoundation.CGFloat {
      get
    }
    open var xxxLarge: CoreFoundation.CGFloat {
      get
    }
    open var xxxSmall: CoreFoundation.CGFloat {
      get
    }
    open var xxxxLarge: CoreFoundation.CGFloat {
      get
    }
    @objc deinit
  }
  open var Typography: FluentUI.FluentUIStyle.TypographyAppearanceProxy {
    get
  }
  open class TypographyAppearanceProxy {
    final public let mainProxy: () -> FluentUI.FluentUIStyle
    public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
    open var body: UIKit.UIFont {
      get
    }
    open var caption1: UIKit.UIFont {
      get
    }
    open var footnote: UIKit.UIFont {
      get
    }
    open var headline: UIKit.UIFont {
      get
    }
    open var subheadline: UIKit.UIFont {
      get
    }
    @objc deinit
  }
  open var __TextStyle: FluentUI.FluentUIStyle.__TextStyleAppearanceProxy {
    get
  }
  open class __TextStyleAppearanceProxy {
    final public let mainProxy: () -> FluentUI.FluentUIStyle
    public init(proxy: @escaping () -> FluentUI.FluentUIStyle)
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MSFFonts) final public class Fonts : ObjectiveC.NSObject {
  @objc public static var largeTitle: UIKit.UIFont {
    @objc get
  }
  @objc public static var title1: UIKit.UIFont {
    @objc get
  }
  @objc public static var title2: UIKit.UIFont {
    @objc get
  }
  @objc public static var headline: UIKit.UIFont {
    @objc get
  }
  @objc public static var body: UIKit.UIFont {
    @objc get
  }
  @objc public static var subhead: UIKit.UIFont {
    @objc get
  }
  @objc public static var footnote: UIKit.UIFont {
    @objc get
  }
  @objc public static var button1: UIKit.UIFont {
    @objc get
  }
  @objc public static var button2: UIKit.UIFont {
    @objc get
  }
  @objc public static var caption1: UIKit.UIFont {
    @objc get
  }
  @objc public static var caption2: UIKit.UIFont {
    @objc get
  }
  @objc deinit
}
@objc(MSFTextStyle) public enum TextStyle : Swift.Int, Swift.CaseIterable {
  case largeTitle
  case title1
  case title2
  case headline
  case body
  case subhead
  case footnote
  case button1
  case button2
  case caption1
  case caption2
  public var font: UIKit.UIFont {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [FluentUI.TextStyle]
  public typealias RawValue = Swift.Int
  public static var allCases: [FluentUI.TextStyle] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(MSFTextColorStyle) public enum TextColorStyle : Swift.Int, Swift.CaseIterable {
  case regular
  case secondary
  case white
  case primary
  case error
  case warning
  case disabled
  public func color(for window: UIKit.UIWindow) -> UIKit.UIColor
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [FluentUI.TextColorStyle]
  public typealias RawValue = Swift.Int
  public static var allCases: [FluentUI.TextColorStyle] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(MSFLabel) @_Concurrency.MainActor(unsafe) open class Label : UIKit.UILabel {
  @objc @_Concurrency.MainActor(unsafe) open var colorStyle: FluentUI.TextColorStyle {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var style: FluentUI.TextStyle {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var maxFontSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(style: FluentUI.TextStyle = .body, colorStyle: FluentUI.TextColorStyle = .regular)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MSFTooltip) open class Tooltip : ObjectiveC.NSObject {
  @objc(MSFTooltipArrowDirection) public enum ArrowDirection : Swift.Int {
    case up, down, left, right
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(MSFTooltipDismissMode) public enum DismissMode : Swift.Int {
    case tapAnywhere
    case tapOnTooltip
    case tapOnTooltipOrAnchor
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static let defaultScreenMargins: UIKit.UIEdgeInsets
  @objc public static let shared: FluentUI.Tooltip
  @objc public var textAlignment: UIKit.NSTextAlignment
  @objc public var isShowing: Swift.Bool {
    get
  }
  @objc public func show(with message: Swift.String, for anchorView: UIKit.UIView, preferredArrowDirection: FluentUI.Tooltip.ArrowDirection = .down, offset: CoreFoundation.CGPoint = CGPoint(x: 0, y: 0), screenMargins: UIKit.UIEdgeInsets = defaultScreenMargins, dismissOn dismissMode: FluentUI.Tooltip.DismissMode = .tapAnywhere, onTap: (() -> Swift.Void)? = nil)
  @objc public func hide()
  @objc deinit
}
extension FluentUI.Colors {
  public struct Tooltip {
    public static var text: UIKit.UIColor
  }
}
@_inheritsConvenienceInitializers @objc(MSFTouchForwardingView) @_Concurrency.MainActor(unsafe) open class TouchForwardingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc extension UIKit.UIColor {
  @objc dynamic public var current: UIKit.UIColor {
    @objc get
  }
  @objc convenience dynamic public init(light: UIKit.UIColor, lightHighContrast: UIKit.UIColor? = nil, lightElevated: UIKit.UIColor? = nil, lightElevatedHighContrast: UIKit.UIColor? = nil, dark: UIKit.UIColor? = nil, darkHighContrast: UIKit.UIColor? = nil, darkElevated: UIKit.UIColor? = nil, darkElevatedHighContrast: UIKit.UIColor? = nil)
}
extension FluentUI.Colors.Palette : Swift.Equatable {}
extension FluentUI.Colors.Palette : Swift.Hashable {}
extension FluentUI.Colors.Palette : Swift.RawRepresentable {}
extension FluentUI.S.FontTextStyle : Swift.Equatable {}
extension FluentUI.S.FontTextStyle : Swift.Hashable {}
extension FluentUI.TextStyle : Swift.Equatable {}
extension FluentUI.TextStyle : Swift.Hashable {}
extension FluentUI.TextStyle : Swift.RawRepresentable {}
extension FluentUI.TextColorStyle : Swift.Equatable {}
extension FluentUI.TextColorStyle : Swift.Hashable {}
extension FluentUI.TextColorStyle : Swift.RawRepresentable {}
extension FluentUI.Tooltip.ArrowDirection : Swift.Equatable {}
extension FluentUI.Tooltip.ArrowDirection : Swift.Hashable {}
extension FluentUI.Tooltip.ArrowDirection : Swift.RawRepresentable {}
extension FluentUI.Tooltip.DismissMode : Swift.Equatable {}
extension FluentUI.Tooltip.DismissMode : Swift.Hashable {}
extension FluentUI.Tooltip.DismissMode : Swift.RawRepresentable {}
