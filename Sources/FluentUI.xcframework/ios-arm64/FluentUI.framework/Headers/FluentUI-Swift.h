#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef FLUENTUI_SWIFT_H
#define FLUENTUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FluentUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIWindow;
@class UIColor;

/// Protocol through which consumers can provide colors to “theme” their experiences
/// The window in which the color will be shown is sent to allow apps to provide different experiences per each window
SWIFT_PROTOCOL_NAMED("ColorProviding")
@protocol MSFColorProviding
/// Primary branding color. If this protocol is not conformed to, communicationBlue will be used
- (UIColor * _Nullable)primaryColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Tint colors. If this protocol is not conformed to, communicationBlueTint* colors will be used
- (UIColor * _Nullable)primaryTint10ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint20ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint30ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint40ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Shade colors. If this protocol is not conformed to, communicationBlueShade* colors will be used
- (UIColor * _Nullable)primaryShade10ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryShade20ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryShade30ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
@end


/// Entry point for the app stylesheet
SWIFT_CLASS("_TtC8FluentUI13FluentUIStyle")
@interface FluentUIStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8FluentUI19ColorProvidingStyle")
@interface ColorProvidingStyle : FluentUIStyle
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFColorPalette : NSInteger;

SWIFT_CLASS_NAMED("Colors")
@interface MSFColors : NSObject
+ (void)setProviderWithProvider:(id <MSFColorProviding> _Nonnull)provider for:(UIWindow * _Nonnull)window;
/// Use these funcs to grab a color customized by a ColorProviding object for a specific window.. If no colorProvider exists for the window, falls back to deprecated singleton theme color
+ (UIColor * _Nonnull)primaryFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint10For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint20For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint30For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint40For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade10For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade20For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade30For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Customization of primary colors should happen through the ColorProviding protocol rather than this singleton. Doing so
/// will allow hosts of fluentui controls to simultaneously host different experiences with different themes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primary SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint10 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint10 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint10:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint20 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint20 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint20:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint30 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint30 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint30:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint40 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint40 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint40:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade10 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade10 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade10:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade20 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade20 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade20:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade30 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade30 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade30:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull foregroundOnPrimary SWIFT_DEPRECATED_MSG("", "textOnAccent");)
+ (UIColor * _Nonnull)foregroundOnPrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setForegroundOnPrimary:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray950;)
+ (UIColor * _Nonnull)gray950 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray900;)
+ (UIColor * _Nonnull)gray900 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray800;)
+ (UIColor * _Nonnull)gray800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray700;)
+ (UIColor * _Nonnull)gray700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray600;)
+ (UIColor * _Nonnull)gray600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray500;)
+ (UIColor * _Nonnull)gray500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray400;)
+ (UIColor * _Nonnull)gray400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray300;)
+ (UIColor * _Nonnull)gray300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray200;)
+ (UIColor * _Nonnull)gray200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray100;)
+ (UIColor * _Nonnull)gray100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray50;)
+ (UIColor * _Nonnull)gray50 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray25;)
+ (UIColor * _Nonnull)gray25 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull error;)
+ (UIColor * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull warning;)
+ (UIColor * _Nonnull)warning SWIFT_WARN_UNUSED_RESULT;
/// Used for hyperlinks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull communicationBlue;)
+ (UIColor * _Nonnull)communicationBlue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull disabled SWIFT_DEPRECATED_MSG("", "textDisabled");)
+ (UIColor * _Nonnull)disabled SWIFT_WARN_UNUSED_RESULT;
/// text color used for main level in the screen. eg. title in dialog, title in navigationbar with <code>surfacePrimary</code>, etc
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textDominant;)
+ (UIColor * _Nonnull)textDominant SWIFT_WARN_UNUSED_RESULT;
/// text color used for titles
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull textPrimary;)
+ (UIColor * _Nonnull)textPrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setTextPrimary:(UIColor * _Nonnull)value;
/// text color used for subtitles
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textSecondary;)
+ (UIColor * _Nonnull)textSecondary SWIFT_WARN_UNUSED_RESULT;
/// text color used in disabled state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textDisabled;)
+ (UIColor * _Nonnull)textDisabled SWIFT_WARN_UNUSED_RESULT;
/// text appears on top of the surface that uses <code>Colors.primary</code> as background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textOnAccent;)
+ (UIColor * _Nonnull)textOnAccent SWIFT_WARN_UNUSED_RESULT;
/// icon used as call-to-actions without a label attached. They need to reach a minimum contrast ratio 4.5:1 to its background
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconPrimary;)
+ (UIColor * _Nonnull)iconPrimary SWIFT_WARN_UNUSED_RESULT;
/// icon that are attached to a label and are only used for decorative purposes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconSecondary;)
+ (UIColor * _Nonnull)iconSecondary SWIFT_WARN_UNUSED_RESULT;
/// icon color used in disabled state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconDisabled;)
+ (UIColor * _Nonnull)iconDisabled SWIFT_WARN_UNUSED_RESULT;
/// icon appears on top of surfaces that uses <code>Colors.primary</code> as background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconOnAccent;)
+ (UIColor * _Nonnull)iconOnAccent SWIFT_WARN_UNUSED_RESULT;
/// In Darkmode, our system use two sets of background colors – called base and elevated – to enhance the perception of depath when one dark interface is layered above another.
/// The dark base colors are darker, making background interface appear to recede, and the elevate colors are lighter, making foreground interfaces appear to advance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull surfacePrimary;)
+ (UIColor * _Nonnull)surfacePrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setSurfacePrimary:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceSecondary;)
+ (UIColor * _Nonnull)surfaceSecondary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceTertiary;)
+ (UIColor * _Nonnull)surfaceTertiary SWIFT_WARN_UNUSED_RESULT;
/// also used for disabled background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceQuaternary;)
+ (UIColor * _Nonnull)surfaceQuaternary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnPrimary;)
+ (UIColor * _Nonnull)dividerOnPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnSecondary;)
+ (UIColor * _Nonnull)dividerOnSecondary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnTertiary;)
+ (UIColor * _Nonnull)dividerOnTertiary SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)colorFromPalette:(enum MSFColorPalette)palette SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// colors defined in asset catalog
typedef SWIFT_ENUM_NAMED(NSInteger, MSFColorPalette, "Palette", open) {
  MSFColorPaletteAnchorShade30 = 0,
  MSFColorPaletteAnchorTint40 = 1,
  MSFColorPaletteBeigeShade30 = 2,
  MSFColorPaletteBeigeTint40 = 3,
  MSFColorPaletteBlueShade30 = 4,
  MSFColorPaletteBlueTint40 = 5,
  MSFColorPaletteBrassShade30 = 6,
  MSFColorPaletteBrassTint40 = 7,
  MSFColorPaletteBrownShade30 = 8,
  MSFColorPaletteBrownTint40 = 9,
  MSFColorPaletteCornFlowerShade30 = 10,
  MSFColorPaletteCornFlowerTint40 = 11,
  MSFColorPaletteCranberryShade30 = 12,
  MSFColorPaletteCranberryTint40 = 13,
  MSFColorPaletteDarkGreenShade30 = 14,
  MSFColorPaletteDarkGreenTint40 = 15,
  MSFColorPaletteDarkRedShade30 = 16,
  MSFColorPaletteDarkRedTint40 = 17,
  MSFColorPaletteForestShade30 = 18,
  MSFColorPaletteForestTint40 = 19,
  MSFColorPaletteGoldShade30 = 20,
  MSFColorPaletteGoldTint40 = 21,
  MSFColorPaletteGrapeShade30 = 22,
  MSFColorPaletteGrapeTint40 = 23,
  MSFColorPaletteLavenderShade30 = 24,
  MSFColorPaletteLavenderTint40 = 25,
  MSFColorPaletteLightTealShade30 = 26,
  MSFColorPaletteLightTealTint40 = 27,
  MSFColorPaletteLilacShade30 = 28,
  MSFColorPaletteLilacTint40 = 29,
  MSFColorPaletteMagentaShade30 = 30,
  MSFColorPaletteMagentaTint40 = 31,
  MSFColorPaletteMarigoldShade30 = 32,
  MSFColorPaletteMarigoldTint40 = 33,
  MSFColorPaletteMinkShade30 = 34,
  MSFColorPaletteMinkTint40 = 35,
  MSFColorPaletteNavyShade30 = 36,
  MSFColorPaletteNavyTint40 = 37,
  MSFColorPalettePeachShade30 = 38,
  MSFColorPalettePeachTint40 = 39,
  MSFColorPalettePinkShade30 = 40,
  MSFColorPalettePinkTint40 = 41,
  MSFColorPalettePlatinumShade30 = 42,
  MSFColorPalettePlatinumTint40 = 43,
  MSFColorPalettePlumShade30 = 44,
  MSFColorPalettePlumTint40 = 45,
  MSFColorPalettePumpkinShade30 = 46,
  MSFColorPalettePumpkinTint40 = 47,
  MSFColorPalettePurpleShade30 = 48,
  MSFColorPalettePurpleTint40 = 49,
  MSFColorPaletteRedShade30 = 50,
  MSFColorPaletteRedTint40 = 51,
  MSFColorPaletteRoyalBlueShade30 = 52,
  MSFColorPaletteRoyalBlueTint40 = 53,
  MSFColorPaletteSeafoamShade30 = 54,
  MSFColorPaletteSeafoamTint40 = 55,
  MSFColorPaletteSteelShade30 = 56,
  MSFColorPaletteSteelTint40 = 57,
  MSFColorPaletteTealShade30 = 58,
  MSFColorPaletteTealTint40 = 59,
  MSFColorPalettePinkRed10 = 60,
  MSFColorPaletteRed20 = 61,
  MSFColorPaletteRed10 = 62,
  MSFColorPaletteOrange30 = 63,
  MSFColorPaletteOrange20 = 64,
  MSFColorPaletteOrangeYellow20 = 65,
  MSFColorPaletteGreen20 = 66,
  MSFColorPaletteGreen10 = 67,
  MSFColorPaletteCyan30 = 68,
  MSFColorPaletteCyan20 = 69,
  MSFColorPaletteCyanBlue20 = 70,
  MSFColorPaletteCyanBlue10 = 71,
  MSFColorPaletteBlue10 = 72,
  MSFColorPaletteBlueMagenta30 = 73,
  MSFColorPaletteBlueMagenta20 = 74,
  MSFColorPaletteMagenta20 = 75,
  MSFColorPaletteMagenta10 = 76,
  MSFColorPaletteMagentaPink10 = 77,
  MSFColorPaletteGray40 = 78,
  MSFColorPaletteGray30 = 79,
  MSFColorPaletteGray20 = 80,
  MSFColorPaletteGray25 = 81,
  MSFColorPaletteGray50 = 82,
  MSFColorPaletteGray100 = 83,
  MSFColorPaletteGray200 = 84,
  MSFColorPaletteGray300 = 85,
  MSFColorPaletteGray400 = 86,
  MSFColorPaletteGray500 = 87,
  MSFColorPaletteGray600 = 88,
  MSFColorPaletteGray700 = 89,
  MSFColorPaletteGray800 = 90,
  MSFColorPaletteGray900 = 91,
  MSFColorPaletteGray950 = 92,
  MSFColorPaletteCommunicationBlue = 93,
  MSFColorPaletteCommunicationBlueTint40 = 94,
  MSFColorPaletteCommunicationBlueTint30 = 95,
  MSFColorPaletteCommunicationBlueTint20 = 96,
  MSFColorPaletteCommunicationBlueTint10 = 97,
  MSFColorPaletteCommunicationBlueShade30 = 98,
  MSFColorPaletteCommunicationBlueShade20 = 99,
  MSFColorPaletteCommunicationBlueShade10 = 100,
  MSFColorPaletteDangerPrimary = 101,
  MSFColorPaletteDangerTint40 = 102,
  MSFColorPaletteDangerTint30 = 103,
  MSFColorPaletteDangerTint20 = 104,
  MSFColorPaletteDangerTint10 = 105,
  MSFColorPaletteDangerShade30 = 106,
  MSFColorPaletteDangerShade20 = 107,
  MSFColorPaletteDangerShade10 = 108,
  MSFColorPaletteWarningPrimary = 109,
  MSFColorPaletteWarningTint40 = 110,
  MSFColorPaletteWarningTint30 = 111,
  MSFColorPaletteWarningTint20 = 112,
  MSFColorPaletteWarningTint10 = 113,
  MSFColorPaletteWarningShade30 = 114,
  MSFColorPaletteWarningShade20 = 115,
  MSFColorPaletteWarningShade10 = 116,
  MSFColorPaletteSuccessPrimary = 117,
  MSFColorPaletteSuccessTint40 = 118,
  MSFColorPaletteSuccessTint30 = 119,
  MSFColorPaletteSuccessTint20 = 120,
  MSFColorPaletteSuccessTint10 = 121,
  MSFColorPaletteSuccessShade30 = 122,
  MSFColorPaletteSuccessShade20 = 123,
  MSFColorPaletteSuccessShade10 = 124,
  MSFColorPalettePresenceAvailable = 125,
  MSFColorPalettePresenceAway = 126,
  MSFColorPalettePresenceBlocked = 127,
  MSFColorPalettePresenceBusy = 128,
  MSFColorPalettePresenceDnd = 129,
  MSFColorPalettePresenceOffline = 130,
  MSFColorPalettePresenceOof = 131,
  MSFColorPalettePresenceUnknown = 132,
};



@interface MSFColors (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull navigationBarBackground;)
+ (UIColor * _Nonnull)navigationBarBackground SWIFT_WARN_UNUSED_RESULT;
@end

@class NSBundle;
@protocol UIAppearanceContainer;

SWIFT_CLASS("_TtC8FluentUI17FluentUIFramework")
@interface FluentUIFramework : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull resourceBundle;)
+ (NSBundle * _Nonnull)resourceBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull colorsBundle;)
+ (NSBundle * _Nonnull)colorsBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL usesFluentIcons SWIFT_DEPRECATED_MSG("Non-fluent icons no longer supported. Setting this var no longer has any effect and it will be removed in a future update.");)
+ (BOOL)usesFluentIcons SWIFT_WARN_UNUSED_RESULT;
+ (void)setUsesFluentIcons:(BOOL)value;
+ (void)initializeAppearance SWIFT_DEPRECATED_MSG("", "initializeAppearanceWith:whenContainedInInstancesOf:");
+ (void)initializeAppearanceWith:(UIColor * _Nonnull)primaryColor whenContainedInInstancesOf:(NSArray<Class <UIAppearanceContainer>> * _Nullable)containerTypes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIFont;

SWIFT_CLASS_NAMED("Fonts")
@interface MSFFonts : NSObject
/// Bold 34pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull largeTitle;)
+ (UIFont * _Nonnull)largeTitle SWIFT_WARN_UNUSED_RESULT;
/// Bold 28 pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull title1;)
+ (UIFont * _Nonnull)title1 SWIFT_WARN_UNUSED_RESULT;
/// Semibold 22pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull title2;)
+ (UIFont * _Nonnull)title2 SWIFT_WARN_UNUSED_RESULT;
/// Semibold 17pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull headline;)
+ (UIFont * _Nonnull)headline SWIFT_WARN_UNUSED_RESULT;
/// Regular 17pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull body;)
+ (UIFont * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
/// Regular 15pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull subhead;)
+ (UIFont * _Nonnull)subhead SWIFT_WARN_UNUSED_RESULT;
/// Regular 13pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull footnote;)
+ (UIFont * _Nonnull)footnote SWIFT_WARN_UNUSED_RESULT;
/// Medium 15pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull button1;)
+ (UIFont * _Nonnull)button1 SWIFT_WARN_UNUSED_RESULT;
/// Medium 13pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull button2;)
+ (UIFont * _Nonnull)button2 SWIFT_WARN_UNUSED_RESULT;
/// Regular 12pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull caption1;)
+ (UIFont * _Nonnull)caption1 SWIFT_WARN_UNUSED_RESULT;
/// Regular 11pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull caption2;)
+ (UIFont * _Nonnull)caption2 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFTextColorStyle : NSInteger;
enum MSFTextStyle : NSInteger;
@class NSCoder;

/// By default, <code>adjustsFontForContentSizeCategory</code> is set to true to automatically update its font when device’s content size category changes
SWIFT_CLASS_NAMED("Label")
@interface MSFLabel : UILabel
@property (nonatomic) enum MSFTextColorStyle colorStyle;
@property (nonatomic) enum MSFTextStyle style;
/// The maximum allowed size point for the receiver’s font. This property can be used
/// to restrict the largest size of the label when scaling due to Dynamic Type. The
/// default value is 0, indicating there is no maximum size.
@property (nonatomic) CGFloat maxFontSize;
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
- (nonnull instancetype)initWithStyle:(enum MSFTextStyle)style colorStyle:(enum MSFTextColorStyle)colorStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToWindow;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MSFTextColorStyle, "TextColorStyle", open) {
  MSFTextColorStyleRegular = 0,
  MSFTextColorStyleSecondary = 1,
  MSFTextColorStyleWhite = 2,
  MSFTextColorStylePrimary = 3,
  MSFTextColorStyleError = 4,
  MSFTextColorStyleWarning = 5,
  MSFTextColorStyleDisabled = 6,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTextStyle, "TextStyle", open) {
  MSFTextStyleLargeTitle = 0,
  MSFTextStyleTitle1 = 1,
  MSFTextStyleTitle2 = 2,
  MSFTextStyleHeadline = 3,
  MSFTextStyleBody = 4,
  MSFTextStyleSubhead = 5,
  MSFTextStyleFootnote = 6,
  MSFTextStyleButton1 = 7,
  MSFTextStyleButton2 = 8,
  MSFTextStyleCaption1 = 9,
  MSFTextStyleCaption2 = 10,
};

@class NSString;
@class UIView;
enum MSFTooltipArrowDirection : NSInteger;
enum MSFTooltipDismissMode : NSInteger;

/// A styled tooltip that is presented anchored to a view.
SWIFT_CLASS_NAMED("Tooltip")
@interface MSFTooltip : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIEdgeInsets defaultScreenMargins;)
+ (UIEdgeInsets)defaultScreenMargins SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MSFTooltip * _Nonnull shared;)
+ (MSFTooltip * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The alignment of the text in the tooltip. Defaults to natural alignment (left for LTR languages, right for RTL languages).
@property (nonatomic) NSTextAlignment textAlignment;
/// Whether a tooltip is currently showing.
@property (nonatomic, readonly) BOOL isShowing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Displays a tooltip based on the current settings, pointing to the supplied anchorView.
/// If another tooltip view is already showing, it will be dismissed and the new tooltip will be shown.
/// \param message The text to be displayed on the new tooltip view.
///
/// \param anchorView The view to point to with the new tooltip’s arrow.
///
/// \param preferredArrowDirection The preferrred direction for the tooltip’s arrow. Only the arrow’s axis is guaranteed; the direction may be changed based on available space between the anchorView and the screen’s margins. Defaults to down.
///
/// \param offset An offset from the tooltip’s default position.
///
/// \param screenMargins The margins from the window’s safe area insets used for laying out the tooltip. Defaults to 16.0 pts on all sides.
///
/// \param dismissMode The mode of tooltip dismissal. Defaults to tapping anywhere.
///
/// \param onTap An optional closure used to do work after the user taps
///
- (void)showWith:(NSString * _Nonnull)message for:(UIView * _Nonnull)anchorView preferredArrowDirection:(enum MSFTooltipArrowDirection)preferredArrowDirection offset:(CGPoint)offset screenMargins:(UIEdgeInsets)screenMargins dismissOn:(enum MSFTooltipDismissMode)dismissMode onTap:(void (^ _Nullable)(void))onTap;
/// Hides the currently shown tooltip.
- (void)hide;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTooltipArrowDirection, "ArrowDirection", open) {
  MSFTooltipArrowDirectionUp = 0,
  MSFTooltipArrowDirectionDown = 1,
  MSFTooltipArrowDirectionLeft = 2,
  MSFTooltipArrowDirectionRight = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTooltipDismissMode, "DismissMode", open) {
  MSFTooltipDismissModeTapAnywhere = 0,
  MSFTooltipDismissModeTapOnTooltip = 1,
  MSFTooltipDismissModeTapOnTooltipOrAnchor = 2,
};

@class UIEvent;

SWIFT_CLASS_NAMED("TouchForwardingView")
@interface MSFTouchForwardingView : UIView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIColor (SWIFT_EXTENSION(FluentUI))
/// Returns self on iOS 13 and later. For older iOS versions returns self for Regular Contrast mode or a specific color for Increased Contrast mode if it’s defined either for this color or for one of its ancestors.
@property (nonatomic, readonly, strong) UIColor * _Nonnull current;
- (nonnull instancetype)initWithLight:(UIColor * _Nonnull)light lightHighContrast:(UIColor * _Nullable)lightHighContrast lightElevated:(UIColor * _Nullable)lightElevated lightElevatedHighContrast:(UIColor * _Nullable)lightElevatedHighContrast dark:(UIColor * _Nullable)dark darkHighContrast:(UIColor * _Nullable)darkHighContrast darkElevated:(UIColor * _Nullable)darkElevated darkElevatedHighContrast:(UIColor * _Nullable)darkElevatedHighContrast;
@end










#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
